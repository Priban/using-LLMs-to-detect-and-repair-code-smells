### Step 1: Identify the Code Smell in the Code

The code contains several code smells:
1. **Long Function**: The `transferFunds` and `payBill` methods in the `BankAccount` class are doing multiple things, making them long and harder to maintain.
2. **Duplicated Code**: The `transferFunds` and `payBill` methods have similar code for checking balance and updating the transaction history.
3. **Large Class**: The `BankAccount` class has multiple responsibilities, including managing transactions and maintaining transaction history.
4. **Primitive Obsession**: The `transactionHistory` array uses plain objects to store transaction details, which can be encapsulated in a class.

### Step 2: Definition of the Code Smell

1. **Long Function**: A function that is too long and does too many things, making it hard to understand and maintain.
2. **Duplicated Code**: Code that is repeated in multiple places, making it harder to maintain and more error-prone.
3. **Large Class**: A class that has too many responsibilities, making it hard to understand and maintain.
4. **Primitive Obsession**: The use of primitive data types to represent complex data structures, which can lead to scattered logic and harder maintenance.

### Step 3: Refactor the Code

#### Refactored Code:

```javascript
class Transaction {
  constructor(type, amount, date, details) {
    this.type = type;
    this.amount = amount;
    this.date = date;
    this.details = details;
  }

  toString() {
    return `${this.date.toLocaleString()}: ${this.type} of ${this.amount}`;
  }
}

class BankAccount {
  constructor(accountNumber, initialBalance) {
    this.accountNumber = accountNumber;
    this.balance = initialBalance;
    this.transactionHistory = [];
  }

  canProcessTransaction(amount) {
    if (amount > this.balance) {
      console.log('Insufficient funds');
      return false;
    }
    return true;
  }

  processTransaction(amount, details, type) {
    this.balance -= amount;
    this.transactionHistory.push(new Transaction(type, amount, new Date(), details));
    console.log(`${type} of ${amount}. New balance: ${this.balance}`);
    return true;
  }

  transferFunds(amount, toAccount) {
    if (!this.canProcessTransaction(amount)) return false;
    this.balance -= amount;
    toAccount.balance += amount;
    this.transactionHistory.push(new Transaction('transfer', amount, new Date(), { toAccount: toAccount.accountNumber }));
    console.log(`Transferred ${amount} to account ${toAccount.accountNumber}. New balance: ${this.balance}`);
    return true;
  }

  payBill(amount, biller) {
    if (!this.canProcessTransaction(amount)) return false;
    return this.processTransaction(amount, { biller: biller }, 'bill payment');
  }

  printTransactionHistory() {
    console.log('Transaction History:');
    this.transactionHistory.forEach((transaction) => {
      console.log(transaction.toString());
    });
  }
}

class API {
  constructor() {
    this.accounts = {};
  }

  createAccount(accountNumber, initialBalance) {
    if (this.accounts[accountNumber]) {
      console.log('Account already exists');
      return false;
    }
    this.accounts[accountNumber] = new BankAccount(accountNumber, initialBalance);
    return true;
  }

  transferFunds(fromAccountNumber, toAccountNumber, amount) {
    const fromAccount = this.accounts[fromAccountNumber];
    const toAccount = this.accounts[toAccountNumber];
    if (!fromAccount || !toAccount) {
      console.log('One or both accounts not found');
      return false;
    }
    return fromAccount.transferFunds(amount, toAccount);
  }

  payBill(accountNumber, amount, biller) {
    const account = this.accounts[accountNumber];
    if (!account) {
      console.log('Account not found');
      return false;
    }
    return account.payBill(amount, biller);
  }

  printTransactionHistory(accountNumber) {
    const account = this.accounts[accountNumber];
    if (!account) {
      console.log('Account not found');
      return;
    }
    account.printTransactionHistory();
  }
}

module.exports = { API };
```

### Explanation of Refactoring:

1. **Extracted `Transaction` Class**: Encapsulated transaction details in a `Transaction` class to address Primitive Obsession.
2. **Extracted Common Logic**: Moved common logic for checking balance and processing transactions into separate methods (`canProcessTransaction` and `processTransaction`) to reduce code duplication.
3. **Simplified Methods**: Simplified `transferFunds` and `payBill` methods by using the extracted methods, making them shorter and more readable.
4. **Maintained API Structure**: Ensured the external behavior of the `API` class remains the same, so the tests will still pass without modification.