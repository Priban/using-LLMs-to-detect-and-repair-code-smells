### Step 1: Identify the Code Smell

The code contains several code smells:
1. **Large Class**: The `EShop` class has too many responsibilities, including managing products, the cart, and user authentication.
2. **Long Function**: The `addToCart` and `removeFromCart` methods are doing multiple things.
3. **Data Clumps**: The `products` and `cart` arrays contain objects with similar structures.
4. **Primitive Obsession**: The `user` object is a plain object with primitive values.

### Step 2: Definition of the Code Smells

1. **Large Class**: A class that has too many responsibilities and is trying to do too much.
2. **Long Function**: A function that is too long and does too many things, making it hard to understand and maintain.
3. **Data Clumps**: Groups of data that frequently appear together, indicating that they should be encapsulated in their own class.
4. **Primitive Obsession**: The use of primitive data types to represent domain ideas, instead of using small objects for simple tasks.

### Step 3: Refactor the Code

#### Refactoring Plan

1. **Extract Classes**: Create separate classes for `Product`, `Cart`, and `User`.
2. **Extract Methods**: Break down long methods into smaller, more focused methods.
3. **Encapsulate Data**: Use classes to encapsulate the data for `products`, `cart`, and `user`.

#### Refactored Code

```javascript
class Product {
    constructor(id, name, price, stock) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.stock = stock;
    }

    reduceStock(quantity) {
        if (this.stock < quantity) {
            throw new Error('Product is not available.');
        }
        this.stock -= quantity;
    }

    increaseStock(quantity) {
        this.stock += quantity;
    }
}

class CartItem {
    constructor(product, quantity) {
        this.product = product;
        this.quantity = quantity;
    }

    increaseQuantity(quantity) {
        this.quantity += quantity;
    }
}

class Cart {
    constructor() {
        this.items = [];
    }

    addItem(product, quantity) {
        const cartItem = this.items.find(item => item.product.id === product.id);
        if (cartItem) {
            cartItem.increaseQuantity(quantity);
        } else {
            this.items.push(new CartItem(product, quantity));
        }
        product.reduceStock(quantity);
    }

    removeItem(productId) {
        const cartIndex = this.items.findIndex(item => item.product.id === productId);
        if (cartIndex > -1) {
            const cartItem = this.items[cartIndex];
            cartItem.product.increaseStock(cartItem.quantity);
            this.items.splice(cartIndex, 1);
        }
    }

    isEmpty() {
        return this.items.length === 0;
    }

    clear() {
        this.items = [];
    }

    getContents() {
        return this.items.map(item => ({
            product: item.product.name,
            quantity: item.quantity
        }));
    }
}

class User {
    constructor() {
        this.loggedIn = false;
        this.name = '';
        this.email = '';
    }

    login(email, password) {
        if (email === 'user@example.com' && password === 'password123') {
            this.loggedIn = true;
            this.name = 'John Doe';
            this.email = email;
        } else {
            throw new Error('Login failed. Please check your credentials.');
        }
    }

    logout() {
        this.loggedIn = false;
        this.name = '';
        this.email = '';
    }
}

class EShop {
    constructor() {
        this.products = [
            new Product(1, 'Laptop', 1000, 10),
            new Product(2, 'Smartphone', 700, 15),
            new Product(3, 'Tablet', 500, 20),
        ];
        this.cart = new Cart();
        this.user = new User();
    }

    listProducts() {
        return this.products;
    }

    addToCart(productId, quantity) {
        const product = this.products.find(p => p.id === productId);
        if (!product) {
            throw new Error('Product is not available.');
        }
        this.cart.addItem(product, quantity);
    }

    removeFromCart(productId) {
        this.cart.removeItem(productId);
    }

    checkout() {
        if (!this.user.loggedIn) {
            throw new Error('Please log in to proceed to checkout.');
        }
        if (this.cart.isEmpty()) {
            throw new Error('Your cart is empty.');
        }
        // Simulate checkout process
        this.cart.clear();
        return 'Checkout successful.';
    }

    loginUser(email, password) {
        this.user.login(email, password);
    }

    logoutUser() {
        this.user.logout();
    }

    displayCartContents() {
        return this.cart.getContents();
    }
}

class API {
    constructor() {
        this.eshop = new EShop();
    }

    listProducts() {
        return this.eshop.listProducts();
    }

    addToCart(productId, quantity) {
        return this.eshop.addToCart(productId, quantity);
    }

    removeFromCart(productId) {
        return this.eshop.removeFromCart(productId);
    }

    checkout() {
        return this.eshop.checkout();
    }

    loginUser(email, password) {
        return this.eshop.loginUser(email, password);
    }

    logoutUser() {
        return this.eshop.logoutUser();
    }

    displayCartContents() {
        return this.eshop.displayCartContents();
    }
}

module.exports = { API };
```

### Explanation

1. **Product Class**: Encapsulates product-related data and behavior.
2. **CartItem Class**: Represents an item in the cart.
3. **Cart Class**: Manages the cart's items and their quantities.
4. **User Class**: Manages user authentication and state.
5. **EShop Class**: Uses the new classes to manage products, the cart, and user authentication.

This refactoring improves readability and maintainability by breaking down the responsibilities into smaller, more focused classes and methods. The external behavior of the code remains the same, ensuring that all tests still pass.